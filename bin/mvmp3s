#!/usr/bin/env perl

use warnings;
use strict;
use Cwd qw/cwd/;
use File::Find;
use Getopt::Long;

my $START_DIR = cwd();
my($verbose, $dry_run);

GetOptions(
  'dry_run|n' => \$dry_run,
  'verbose'   => \$verbose,
);

my $DROPBOX_BASE_DIR = qq{$ENV{HOME}/Dropbox/Music};
my $AUDIO_FILE_BASE_DIR = qq{$ENV{HOME}/Music/Phile Audio/audio};

find(\&process_disc_directory, $AUDIO_FILE_BASE_DIR);
chdir $START_DIR;

sub process_disc_directory {
    return unless /Disc\s(\d+)$/;
    my $disc_number = $1;

    return unless $File::Find::name =~ m{.*/([^/]+)/([^/]+)/Disc\s+\d+$};
    my($artist, $album) = ($1, $2);

    $artist =~ s/\s+/_/g;
    $album =~ s/\s+/_/g;

    chdir $File::Find::name;

    my $number_of_discs = how_many_discs($File::Find::dir);
    my($music_files, $file_types) = find_music_files($File::Find::name);
    print "$File::Find::name : $artist || $album || $disc_number/$number_of_discs || ", join(', ', @$file_types), "\n";

    foreach my $type (@$file_types) {
        my $dropbox_path = prepare_directory($artist, $album, $type);
        foreach my $filename (grep /[.]$type$/, @$music_files) {
            print "Processing $filename to $dropbox_path\n";
            my $fixed_filename = fix_filename($file_name, $number_of_discs > 1 ? $disc_number : 0);

            print "Filename is now $fixed_filename\n";
            move_file($filename, $dropbox_path);
        }
    }
}


sub fix_filename {
    my($short_filename, $filename, $disc_number) = @_;

    my $is_part_of_multi_disc = $disc_number > 1 || check_for_multiple_discs($filename);
    print '     ', ($is_part_of_multi_disc ? 'is ' : 'is not '), "part of a multi-disc collection\n";

    my $new_filename = $short_filename;
    if($is_part_of_multi_disc) {
        $new_filename =~ s{^}{/Disc_$disc_number-};
        print "Would rename $short_filename to $new_filename\n";
    }

    my $cwd = cwd();
    print qq{Running `mp3capitalize --bare-print --dry-run '$new_filename'` in $cwd\n};
    `mp3capitalize --bare-print --dry-run '$new_filename'`;
}

sub how_many_discs {
    my $album_directory = shift;

    opendir CURRENT_DIR, $album_directory or die "Couldn't open directory $album_directory: $!";
    my @files = readdir CURRENT_DIR;
    closedir CURRENT_DIR;

    return scalar(grep /Disc/, @files);
}

sub find_music_files {
    my $disc_directory = shift;

    opendir CURRENT_DIR, $album_directory or die "Couldn't open directory $album_directory: $!";
    my @music_files = readdir CURRENT_DIR;
    closedir CURRENT_DIR;

    my @music_files = grep /flac|mp3|ogg/, @music_files;
    my @file_types = grep /flac|mp3|ogg/, map {(split /[.]/)[-1]} @music_files;

    return \@music_files, \@file_types;
}

sub move_file {
    my($artist, $album, $filename, $extension) = @_;

    my $dropbox_path = prepare_directory($artist, $album, $extension);

    my $new_path = join '/', $full_path, $filename;
    print "rename $filename, $new_path\n";
    # rename $filename, $new_path unless $dry_run;
}

sub prepare_directory {
    my($artist, $album, $extension) = @_;

    die unless $artist and $album and $extension;

    my $dropbox_path = qq{$DROPBOX_BASE_DIR/$extension/$artist/$album};

    if(-d $dropbox_path) {
        print "$dropbox_path already exists, deleting...\n";
        `rm -rf $dropbox_path` unless $dry_run;
    }

    print "Making directory $dropbox_path\n";
    # `mkdir -p $dropbox_path` unless $dry_run;

    return $dropbox_path;
}

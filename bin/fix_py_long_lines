#!/usr/bin/perl

=head1 NAME

    fix_python - Container script for manipulation of python code

=cut

use strict;
use warnings;

use File::Basename qw/basename/;
use File::Find;
use File::Temp qw/tempfile/;
use Getopt::Long;
use Pod::Usage qw/pod2usage/;

my %MULTIPLEXER = (
    fix_py_division_imports => {
        action => sub {
            my($filename, $file_contents_ref) = @_;
            print "Removing unnecessary division import from $filename\n";
            $$file_contents_ref =~ s{^from __future__ import division\n}{}mg;
            return $file_contents_ref;
        },
        check => sub {
            my($filename, $file_contents_ref) = @_;
            return ($$file_contents_ref =~ m{^from __future__ import division$}m &&
                    $$file_contents_ref !~ m{\s/(?:[=/]|/=)?\s});
        },
        help => 'This script removes unnecessary division imports.',
    },
    fix_py_long_lines => {
        action => sub {
            my($filename, $file_contents_ref) = @_;
            print "Adding E501 exceptions to $filename\n";
            $$file_contents_ref =~ s{^(?!.*noqa)(.{121,})}{$1  # noqa: E501}mg;
            return $file_contents_ref;
        },
        check => sub {
            my($filename, $file_contents_ref) = @_;
            return $$file_contents_ref =~ m{^(?!.*noqa).{121,}}m;
        },
        help => 'This script adds "#noqa: E501" to lines in Python files that need it.',
    },
);

my $script_name = basename($0);
unless( $MULTIPLEXER{$script_name} ) {
    die "$script_name is not a legal invocation of the script!";
}

my $HELP_OUTPUT = <<"EOHELP";
Usage: $script_name [file_or_dir_1 [file_or_dir_2..]]

$MULTIPLEXER{$script_name}{help}
EOHELP

my @SKIPLIST = qw/ttypes.py/;
my %SKIPLIST = map {$_ => 1} @SKIPLIST;

GetOptions(
    'help|?' => sub { print $HELP_OUTPUT; exit 1; },
);

unless( @ARGV ) {
    print $HELP_OUTPUT;
    exit 1;
}

my $skip_count = 0;

foreach my $filename (@ARGV) {
    if( -T $filename) {
        my $pwd = `pwd`;
        chomp $pwd;
        fix_python($filename, $filename);
    }
    elsif( -d _ ) {
        find(\&wanted, $filename);
    }
}

print "Skipped $skip_count files.\n";


sub wanted {
    unless( -T $_ and /\.py$/ ) {
        $skip_count++;
        return;
    }

    if( $SKIPLIST{$_} ) {
        print "Skipping skiplist file: $_\n";
        $skip_count++;
        return;
    }

    fix_python($_, $File::Find::name);
}

sub fix_python {
    my($base_filename, $full_path_name) = @_;

    local $/;
    undef $/;
    open my $fh, '<', $base_filename or do {
        my $pwd = `pwd`;
        chomp $pwd;
        print STDERR "Cannot open $base_filename for reading from $pwd: $!\n";
        return;
    };
    my $file_contents = <$fh>;
    close $fh;

    if( $MULTIPLEXER{$script_name}{check}($full_path_name, \$file_contents) ) {
        my($out, $tmp_filename) = tempfile(UNLINK => 0);

        my $new_file_contents =
            $MULTIPLEXER{$script_name}{action}($full_path_name, \$file_contents);

        print $out $$new_file_contents;
        $out->close;

        rename $tmp_filename, $base_filename;
        unlink $tmp_filename;
    }
    else {
        $skip_count++;
    }
}

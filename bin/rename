#!/usr/bin/perl

=head1 NAME

    rename - rename a set of files, possibly with regex

=head1 SYNOPSIS

    rename [options] <list_of_filenames>

    This script will rename any number of files.

     Options:
       --dry_run or -n   Print-only mode; do not actually move the files.
       --evaluate        Evaluate the replacement string as a Perl expression.
       --global          Make the change in the filename everywhere the pattern exists.
                         Default is to only replace the first occurrence.

=cut


use strict;
use warnings;

use Getopt::Long;
use Pod::Usage qw/pod2usage/;

my($dry_run, $evaluate, $global, $verbose);

GetOptions(
    'dry_run|n|print' => \$dry_run,
    'evaluate'        => \$evaluate,
    'global'          => \$global,
    'help|?'          => sub { pod2usage(); },
    'verbose'         => \$verbose,
);

my $pattern = shift;
my $replacement = shift;

if ( not $evaluate and $replacement =~ m#\$[1-9]# ) {
  $evaluate = 1;
  $replacement =~ s{^|$}{'}g;
  $replacement =~ s{(\$[1-9])}{' . $1 . '}g;

  print qq{Replacement contains a variable, modifying it to "$replacement"\n};
}

foreach my $filename (@ARGV){
  my $new_name = $filename;

  if ( $evaluate and $global ) {
    $new_name =~ s{$pattern}{$replacement}eeg;
  } elsif ( $evaluate ) {
    print "$new_name matches\n" if $verbose and $new_name =~ /$pattern/;
    $new_name =~ s{$pattern}{$replacement}ee;
  } elsif ( $global ) {
    $new_name =~ s{$pattern}{$replacement}eog;
  } else {
    $new_name =~ s{$pattern}{$replacement}eo;
  }

  if($filename eq $new_name){
    print "$filename: No modification necessary\n" if $verbose;
    next;
  }

  print 'NOT! ' if $dry_run;
  print "Moving $filename to $new_name\n";
  rename $filename, $new_name unless $dry_run;

}

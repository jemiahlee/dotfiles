#!/usr/bin/perl

=head1 NAME

    git-scp - copy modified/added files from local machine to remote machine

=head1 SYNOPSIS

    git_scp [options] [regex]

    Script which transfers files from this computer to a remote computer based on settings.

    If STDIN is given, most of the command-line options are ignored. Each of the files
    is transferred.

    If STDIN is not given, the script will look at the output from a `git status` and
    will transfer anything in there, based on the command-line options.

     Options:
       --help|-?        This help message.
       --hostname       Remote machine to copy files to.
                            Defaults to ENV{GIT_SCP_HOSTNAME} if available.
       --interactive    Choose files to transfer interactively.
       --modified_only  Copy only those files which are marked as 'modified' by git and not new or deleted.
       --print_only|-n  Dry-run. Do not copy, just print what would happen.
       --regex          Copy only the files that match this regular expression.
                            This is the default option.
       --remote_base    Base directory to copy files to on remote machine.
                            Defaults to the same path on remote machine as on this one.
       --skiplist       Do not copy files that match this regular expression.
       --ssh_options    Use these options when copying.
                            Defaults to ENV{GIT_SCP_SSH_OPTIONS}.
       --username       Use this username on remote machine when copying the files.
                            Defaults to ENV{GIT_SCP_HOSTNAME} or the current username.
       --verbose        Print extra information.

=head1 NORMAL USAGE

The purpose of this script is to copy any of the files that are currently modified or added to your
local repository to a remote copy of the repository. This is to facilitate working locally in a
cloud-dev environment.

To set this script up, it will be useful for you to set two environment variables:

    GIT_SCP_HOSTNAME
    GIT_SCP_USERNAME
    GIT_SCP_DELETION

=cut

use Cwd qw/getcwd/;
use File::Basename qw/basename dirname/;
use Getopt::Long;
use Pod::Usage qw/pod2usage/;

use warnings;
use strict;

my($interactive, $modified_only, $print_only, $regex, $staged_only, $verbose);
my %transferred;

my $SKIPLIST = [];
my $GIT_REPO_ROOT = get_relative_git_repo_root();

my $hostname = $ENV{GIT_SCP_HOSTNAME};
my $username = $ENV{GIT_SCP_USERNAME} || $ENV{USER};
my $CAN_DELETE = (defined($ENV{GIT_SCP_DELETION}) and $ENV{GIT_SCP_DELETION} eq 'true') ? 1 : 0;
my $ssh_options = $ENV{GIT_SCP_SSH_OPTIONS} || '';
my $remote_base_directory = $ENV{GIT_SCP_REMOTE_BASE_DIR} || qq{/home/$username};

my $current_dir = `pwd`;
chomp $current_dir;
$current_dir =~ s{$ENV{HOME}/$GIT_REPO_ROOT}{};

GetOptions(
    'help|?'         => sub { pod2usage(); },
    'hostname=s'     => \$hostname,
    'interactive|i'  => \$interactive,
    'modified_only'  => \$modified_only,
    'print_only|n'   => \$print_only,
    'regex=s'        => \$regex,
    'remote_base=s'  => \$remote_base_directory,
    'skiplist=s@'    => \$SKIPLIST,
    'ssh_options=s'  => \$ssh_options,
    'staged_only'    => \$staged_only,
    'username=s'     => \$username,
    'verbose'        => \$verbose
);

# make sure all printing happens when we're interactive.
$verbose = 1 if $interactive;

print "\$GIT_REPO_ROOT is $GIT_REPO_ROOT\n" if $verbose;
print "\$remote_base_directory is $remote_base_directory\n" if $verbose;
print "\$current_dir is $current_dir\n" if $verbose;

my $cwd = $current_dir;
$cwd =~ s{$GIT_REPO_ROOT/}{};

my $TRANSFER_TO_URL = qq{$hostname:} . join '/', $remote_base_directory, $GIT_REPO_ROOT, $cwd;
$TRANSFER_TO_URL = "$username\@$TRANSFER_TO_URL" if $username;
print "\$TRANSFER_TO_URL is $TRANSFER_TO_URL\n" if $verbose;

if( @ARGV and not $regex and (not -e $ARGV[0] or -d $ARGV[0] )){
    print "Processing argument as a regex\n" if $verbose;
    $regex = shift;
}

unless( $hostname ){
    print STDERR "You must give this script a --hostname!\n";
    exit 1;
}

$SKIPLIST = join '|', @$SKIPLIST;
if( $SKIPLIST ) {
    $SKIPLIST = qr/$SKIPLIST/;
}

if( defined $regex ) {
    my $cwd = getcwd();
    $regex =~ s{^$cwd\/}{};
    $regex = qr/\Q$regex\E/;
}

if( not -t STDIN ) {
    print "Processing filenames from STDIN\n" if $verbose;
    while(<>) {
        chomp;
        transfer_file(filename => $_, filename_as_argument => 1);
    }
}
elsif ( @ARGV ) {
    print "Processing filenames from the command line\n" if $verbose;
    foreach my $filename (@ARGV) {
        transfer_file(filename => $filename, filename_as_argument => 1);
    }
}
else {
    open PROC_OUT, 'git status --short |' or die "Couldn't deal with 'git status': $!";

    while( <PROC_OUT> ){
        chomp;
        my($x, $y, $filename) = m{^(.)(.)\s(.+)$};

        next if $modified_only and $y ne 'M' and $x ne 'M';
        next if $staged_only and $x eq ' ';

        if($filename =~ m{(\S+) -> (\S+)}){
            my $deletion_filename = $1;
            $filename = $2;

            transfer_file(filename => $deletion_filename, delete => 1);
        }

        transfer_file(filename => $filename, delete => ($x eq 'D' or $y eq 'D'));
    }
}

sub get_relative_git_repo_root {
    my $root = `git rev-parse --show-toplevel`;
    chomp $root;
    $root =~ s{$ENV{HOME}/}{}g;
    return $root;
}

sub file_is_skiplisted {
    my $filename = shift;

    return 0 if not $SKIPLIST;
    return $filename =~ $SKIPLIST;
}

sub file_is_in_matchlist {
    my $filename = shift;

    return 1 if not defined $regex;

    print STDERR "Attempting to match /$regex/ against $filename..." if $verbose;
    unless( $filename =~ /$regex/ ) {
        print " did NOT match!\n" if $verbose;
        return 0;
    }

    print "matched!\n" if $verbose;
    return 1;
}

sub transfer_file {
    my %options = @_;

    my $deletion = delete $options{delete};
    my $filename = delete $options{filename} or die 'No filename provided for transfer!';
    my $filename_as_argument = delete $options{filename_as_argument};

    print "Processing filename {$filename}\n" if $verbose;
    $filename =~ s{\\}{/}g;

    return if $transferred{$filename}++;
    return if file_is_skiplisted($filename);
    return unless file_is_in_matchlist($filename);

    my($execute, $execution_comment);
    if ( $deletion and $CAN_DELETE ) {
        $execute = qq{ssh $ssh_options $hostname rm $TRANSFER_TO_URL/$filename};
        $execution_comment = "DELETING $hostname:$remote_base_directory/$filename";
    }
    else {
        my $dirname = derive_remote_directory($filename);
        $execute = qq{scp $ssh_options $filename $TRANSFER_TO_URL/$dirname};
        $execution_comment = "$filename => $TRANSFER_TO_URL/$dirname";
    }

    print "Executing: $execute\n" if $verbose or $print_only;

    if ( not $filename_as_argument and $interactive ){
        my $input;
        print "\nWould you like me to execute this command (y/N)? ";
        $input = <STDIN>;

        if ($input !~ m{^y}i){
            return;
        }
    }

    print $execution_comment, "\n";

    if (not $print_only) {
        system($execute);
    }
}

sub derive_remote_directory {
    my $filename = shift;

    my $dirname = dirname($filename);
    $dirname = '' if $dirname eq '.';
    if($dirname eq '') {
       print "Set \$dirname to $dirname" if $verbose;
       return $current_dir;
    }

    $dirname =~ s{^\Q$ENV{HOME}\E}{};
    $dirname =~ s{^/?\Q$GIT_REPO_ROOT\E}{};
    print "Processed dirname('$filename') to get '$dirname'\n" if $verbose;

    return $dirname;
}

#!/usr/bin/env perl

=head1 NAME

    git-branch-cleanup - remove local or remote dead branches

=head1 SYNOPSIS

    git-branch-cleanup [options] [remote ...]

     Options:
       --all                  Delete all non-skiplisted branches, non-interactively.
       --dry_run|-n           Do not execute removal commands, just print what would have been done.
       --help|-?              This help message.
       --interactive          Interactively approve the branch to be deleted.
                                  Turned on by default.
       --matching_local_only  Only delete remote branches that match local branches.
       --merged [br]          Only delete branches that have been merged into upstream/master.
                                  Turned on by default.
                                  Optional argument to say which branch should be compared with.
                                  Compares with upstream/master by default.
       --older_than           Find the branches that don't have any commit since this date. Uses
                              "git --since" to figure that out, any date format that works with
                              "git --since" will work. (ie, "1.month", "2.weeks")
       --regex <re>           Only delete branches that match this regular expression.
       --remotes|-r           Do this on the selected remotes.
                                  Defaults to origin.
       --remotes_only         Don't process the local branches.
       --skiplist             Add the next string in the command-line to the skiplist.
                                  Contains 'master' and 'HEAD' no matter what.
       --unmerged             Allow it to delete unmerged branches.
       --verbose              Print extra information.

=cut


use warnings;
use strict;

use Getopt::Long;
use Pod::Usage qw/pod2usage/;

our %ALREADY_FETCHED_REMOTES;
our @SKIPLIST = qw/master HEAD develop/;
our %ALLOWEDLIST;
our $GIT_BRANCH_COMMAND = 'git branch';
our $DEFAULT_REMOTE = 'origin';
our @REMOTES_TO_PROCESS = ($DEFAULT_REMOTE);

our($do_remotes, $dry_run, $older_than, $regex, $remotes_only, $verbose);
our $DEFAULT_COMPARISON_BRANCH = 'master';
our $comparison_branch = $DEFAULT_COMPARISON_BRANCH;
our $MERGED_ONLY = qq{ --merged $comparison_branch};
our $interactive = 1;
our $matching_local = 0;

GetOptions(
           'all'                     => sub { $interactive = 0; },
           'dry_run|dry-run|n'       => sub {
                                            $dry_run = 1;
                                            $interactive = 0;
                                        },
           'help|?'                  => sub {
                                            pod2usage();
                                        },
           'interactive'             => sub {
                                            $interactive = 1 unless $dry_run;
                                            print "Not using interactive mode, since --dry_run is active.\n"
                                              if $dry_run;
                                        },
           'matching_local_only'     => \$matching_local,
           'merged:s'                => sub {
                                            my($opt_name, $branch) = @_;
                                            if($branch) {
                                                $comparison_branch = $branch;
                                                $MERGED_ONLY = qq{ --merged $comparison_branch};
                                            }
                                        },
           'older_than|older-than=s' => \$older_than,
           'regex=s'                 => \$regex,
           'remote:s'                => sub {
                                          $do_remotes = 1;
                                          my($opt_name, $remote) = @_;
                                          if($remote and $remote ne 'origin') {
                                              push @REMOTES_TO_PROCESS, $remote;
                                          }
                                        },
           'remotes_only'            => sub { $remotes_only = 1; $do_remotes = 1; },
           'skiplist=s@'             => \@SKIPLIST,
           'unmerged'                => sub { $MERGED_ONLY = '' },
           'verbose'                 => \$verbose,
);

add_comparison_branch_to_skiplist();
generate_allowedlist_based_on_local_matches() if $matching_local;

our $SKIPLIST = make_skiplist_regex();

if( @ARGV ){
    @REMOTES_TO_PROCESS = @ARGV;
}

print "Processing remote branches..\n" if $verbose;
our %REMOTES_TO_PROCESS;
@REMOTES_TO_PROCESS{@REMOTES_TO_PROCESS} = (1) x @REMOTES_TO_PROCESS;
if( $do_remotes ) {
    foreach my $remote (keys %REMOTES_TO_PROCESS){
        next if $ALREADY_FETCHED_REMOTES{$remote};

        print "git fetch $remote\n";
        `git fetch $remote`;
    }

    process_branches('doing_remote: true');
}

unless( $remotes_only ){
    print "Processing local branches..\n" if $verbose;
    process_branches();
}

exit 0;


sub process_branches {
    my($doing_remote) = @_;

    my $git_branch_command = 'git branch' . $MERGED_ONLY;
    if( $doing_remote ){
        $git_branch_command = 'git branch -r' . $MERGED_ONLY;
    }

    print "Executing '$git_branch_command' to get list of branches to process\n" if $verbose;
    open BRANCHES_FH, "$git_branch_command |" or die "Couldn't open '$git_branch_command': $!";

    my $branch;
    while( $branch = <BRANCHES_FH> ){
        $branch =~ s/\A\s+|\s+\z//g;

        if( $doing_remote and $branch =~ m{^([^/]+)/(\S+)} ){
            my($remote, $branch) = ($1, $2);
            next unless $REMOTES_TO_PROCESS{$remote};
            process_branch($branch, $remote);
        }
        else {
            process_branch($branch);
        }
    }
    close BRANCHES_FH;
}

sub process_branch {
    my($branch, $remote) = @_;

    print "Processing branch $remote/$branch\n" if $remote and $verbose;
    print "Processing branch $branch\n" if not $remote and $verbose;

    if( $branch =~ /^\s*\*/ ){
        print "Skipping the current branch $branch\n" if $verbose;
        return;
    }
    elsif( $SKIPLIST and $branch =~ $SKIPLIST ){
        print "Skipping branch $branch as it is on the skiplist\n" if $verbose;
        return;
    }
    elsif( $regex and $branch !~ m{$regex} ){
        print "Skipping regex miss: $branch\n" if $verbose;
        return;
    }
    elsif( %ALLOWLIST and not $ALLOWEDLIST{$branch}) {
        print "Skipping branch $branch as it is not in the allowedlist\n" if $verbose;
        return;
    }
    elsif( $older_than ) {
        if( $remote and has_commits_newer_than("$remote/$branch", $older_than) ) {
            print "Skipping $remote/$branch as it has commits newer than $older_than\n" if $verbose;
            return;
        }
        elsif( not $remote and has_commits_newer_than($branch, $older_than) ) {
            print "Skipping $branch as it has commits newer than $older_than\n" if $verbose;
            return;
        }
    }

    if( $interactive ){
        if( $remote ){
            print "Delete branch '$remote/$branch'? [Y/n/q] ";
        }
        else {
            print "Delete branch '$branch'? [Y/n/q] ";
        }
        my $input = <STDIN>;
        exit 0 if $input =~ /^\s*q/i;
        return if $input =~ /^\s*n/i;
    }

    print "Would have run: " if $dry_run;
    if( $remote ){
        print "git push $remote :$branch\n" if $verbose or $dry_run;
        system("git push $remote :$branch") unless $dry_run;
    }
    else {
        print "git branch -D $branch\n" if $verbose or $dry_run;
        system("git branch -D $branch") unless $dry_run;
    }
}

sub add_comparison_branch_to_skiplist {
    if( $MERGED_ONLY and $comparison_branch =~ m{(.*)/(.*)} ){
        print "git fetch $1\n";
        `git fetch $1`;
        $ALREADY_FETCHED_REMOTES{$1}++;
        push @SKIPLIST, $2 unless $2 eq 'master';
    }
    elsif( $comparison_branch ) {
        push @SKIPLIST, $comparison_branch;
    }
}

sub generate_allowedlist_based_on_local_matches {
    my $output = `git branch`;
    my @whitelist = split /\s+/, $output;
    @ALLOWEDLIST{@whitelist} = (1) x @allowedlist;
    print join(',', keys(%ALLOWEDLIST)), "\n";
}

sub make_skiplist_regex {
    my $temp_bl = '^(?:' . join('|', map {"\Q$_\E"} @SKIPLIST) . ')$';
    return qr{$temp_bl};
}

sub has_commits_newer_than {
    my($branch_name, $older_than) = @_;

    print "Checking age of branch $branch_name\n" if $verbose;
    my $git_output = `git log --oneline --since $older_than $branch_name`;
    return $git_output ? 1 : 0;
}

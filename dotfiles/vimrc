""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:plug_url_format = 'git@github.com:%s.git'
call plug#begin('~/.vim/plugged')
Plug 'Raimondi/delimitMate'
" Plug 'Valloric/YouCompleteMe'
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'claco/jasmine.vim'
Plug 'easymotion/vim-easymotion'
Plug 'elixir-lang/vim-elixir'
Plug 'hdima/python-syntax'
Plug 'jelera/vim-javascript-syntax'
Plug 'jnurmine/Zenburn'
Plug 'justinmk/vim-sneak'
Plug 'kien/ctrlp.vim'
Plug 'klen/python-mode'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'pangloss/vim-javascript'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'takac/vim-hardtime'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails' ", { 'for': 'ruby' } check "vim --startuptime" to see how long this takes.
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-scripts/JavaScript-Indent'
Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'jeetsukumaran/vim-buffergator'
call plug#end()
unlet g:plug_url_format

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=100

" Enable filetype plugins
filetype plugin on
filetype indent on

" auto update when a file is edited from another editor
set autoread

" Set the "leader" key to be the comma.
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" :W sudo saves the file
" (useful for handling the permission-denied error)
" command W w !sudo tee % > /dev/null

" For regular expressions turn magic on
set magic

" don't write out backup files
set nobackup
set nowb
set noswapfile

" colorscheme Tomorrow-Night

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
nmap <leader>f <Plug>(easymotion-s)

" turn on hardtime for all files.
let g:hardtime_default_on = 1

" Clear the CTRL-P cache
map <D-N> :CtrlPClearCache<CR>:CtrlP<CR>

" Auto-save buffers when focus is lost
:au FocusLost * silent! wa

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM user interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Show line numbers
set number

" Sets the number of lines above the bottom or below
" the top that the scrolling of the file starts
set so=8

" Sets a marker in the window at 120 characters from the left.
let &colorcolumn="100,120"

set cursorline

" Turn on the WiLd menu
set wildmenu

" Ignore compiled, temporary, and backup files
set wildignore+=*.o,*/tmp/*,*/public/uploads/*,*.swp,*.bak,*.pyc,*.class,*.test,*~
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

"Always show current position
set ruler

" allow Vim to manage multiple buffers effectively
" buffers become hidden when abandoned
set hidden

" add git branch to status line
"set statusline=[%n]\ %*%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Configure backspace so it goes to previous line
set backspace=eol,start,indent
"set whichwrap+=<,>
"set whichwrap+=<,>,h,l

" Highlight search results
set hlsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" Enable syntax highlighting
syntax on

"
" map for resizing panes
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>-
  map ( <C-W><
  map ) <C-W>>
end

" Number of columns from the left or right of the window to start
" scrolling
set sidescrolloff=10

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
" cno $h e ~/
" cno $d e ~/Desktop/
" cno $j e ./
" cno $c e <C-\>eCurrentFileDir("e")<cr>

" $q is super useful when browsing on the command line
" it deletes everything until the last slash
" cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-B> <Left>
cnoremap <C-F> <Right>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>
cnoremap <C-d> <del>

" Sets the height of the command bar
set cmdheight=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and indent related.
""""""""""""""""""""""""""""""""""""""""""""""""""""""
"User spaces instead of tabs
set expandtab

" Tab intelligence
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2
"
" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" clear white space in the end of lines
au BufWritePre * :%s/\s\+$//e

" auto-indent the entire file
"map <D-L> gg=G<CR>''z.
map <D-L> gg=G``
map <leader>= gg=G``

" map some emacs-like command in insert-mode
inoremap <C-a> <home>
inoremap <C-d> <del>
inoremap <C-e> <end>
inoremap <C-p> <up>
inoremap <C-n> <down>
inoremap <C-b> <left>
inoremap <C-f> <right>
inoremap <C-v> <PageDown>
inoremap <C-t> <Esc>xhhpi
inoremap <C-k> <C-\><C-O>D
inoremap <C-u> d0
inoremap <C-x><C-s> <Esc>:w<CR>
imap √ <PageUp>
imap ∫ b
imap ƒ f

imap <C-c> <ESC>O

" inoremap <C-y> <C-\><C-O>p
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" something is setting escape to flip tabs. Stop that.
" nunmap <Esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" search
nmap <leader>s :%s/
vmap <leader>s :s/

" scroll the viewport faster
nnoremap <C-e> 10<C-e>
nnoremap <C-y> 10<C-y>

nnoremap <C-y> <esc>zt
nnoremap <C-u> <esc>zz
nnoremap <C-i> <esc>zb

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
"map <space> /
"map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" jump between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" In command mode, Space bar pages down, C-Space pages up
nmap <Space> <C-f>
nmap <C-Space> <C-b>

" Close the current buffer
map <leader>bd :Bclose<cr>
map <leader>bn :Bnext<cr>
map <leader>bl :buffers<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
noremap <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext<cr>
map <leader>tp :tabprevious<cr>

map <D-[> :tabprevious<cr>
map <D-]> :tabnext<cr>
"map <C-[> :tabprevious<cr>
"map <C-]> :tabnext<cr>

" show open buffers
map <D-e> :CtrlPBuffer<CR>
map <leader>e :CtrlPBuffer<CR>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen
  " set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remember info about open buffers on close
set viminfo^=%

""""""""""""""""""""""""""""""
" Buffer-related
""""""""""""""""""""""""""""""
map <D-t> :CtrlP<CR>
imap <D-t> <esc>:CtrlP<CR>
let g:buffergator_autodismiss_on_select=0

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" add git branch to status line
set statusline=[%n]\ %*%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
" map 0 ^

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Underline the current line with '='
nmap <silent> <leader>ul :t.<CR>Vr=

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ack searching and cope displaying
"    requires ack.vim - it's much better than vimgrep/grep
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you Ack after the selected text
vnoremap <silent> gv :call VisualSelection('gv', '')<CR>

" Open Ack and put the cursor in the right position
map <leader>g :Ag!

" bind K to Ag word under cursor
nnoremap K :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap <Leader>s :%s/\<<C-r><C-w>>\>/

" let g:agprg="<custom-ag-path-goes-here> --column"

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>
"
" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with Ack, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic options
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Better :sign interface symbols
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vimrc editing
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" clear lines that were empty comments (probably due
" to wrapping
" au BufWritePre ~/.vimrc.after :%s/^"\s*$/\n/e

" open .vimrc.after
command! V e ~/.vimrc
" update .vimrc.after file
command! Vs so ~/.vimrc

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file-formatting configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType * set tabstop=4|set shiftwidth=2|set expandtab|set wrap
autocmd FileType python set tabstop=4|set shiftwidth=4|set expandtab|set nowrap
autocmd FileType perl set tabstop=4|set shiftwidth=4|set expandtab|set nowrap
autocmd FileType javascript set tabstop=2|set shiftwidth=2|set expandtab|set nowrap
autocmd FileType text set wrap|set tw=75
au BufRead,BufNewFile *.txt set filetype=text

" format JSON using Python's json.tool module
map <leader>js :%!python -m json.tool<CR>

" format JSON using Python's json.tool module
map <leader>xf :%!xmllint --format<CR>

au BufRead,BufNewFile {bash*,.bash*} set ft=sh

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap \ :NERDTreeToggle<CR>
let NERDSpaceDelims = 1
let NERDTreeQuitOnOpen = 0
let NERDTreeShowHidden = 1
let NERDTreeIgnore=['\.pyc$', '\~$']

" allow NerdTree to open the current file's directory.
nmap <leader>n :NERDTreeFind<CR>
nmap <leader>m :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ruby/Rails configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" additional Ruby syntax highliting
au BufRead,BufNewFile {Capfile,Gemfile,Gemfile.lock,Rakefile,Thorfile,config.ru,.caprc,.irbrc,irb_tempfile*} set ft=ruby
au BufRead,BufNewFile *.rb set filetype=ruby ts=2 sw=2

" convert Ruby 1.8 to 1.9 hash syntax
map <D-H> :%s/:\([^ ]*\)\(\s*\)=>/\1:/gc<CR>

" convert string into a symbol
command! StrSym %s/\(['"]\)\([^ ]*\)\1/:\2/gc

" convert symbol into a string
command! SymStr %s/:\([^ ]*\)\(\s*\)/'\1'/gc

" This is some leftover stuff from my last job. I don't think I care about it.
" ctags with rails load path
" map <leader>t :!rails runner 'puts $LOAD_PATH.join(" ")' \| xargs /usr/local/bin/ctags -R public/javascripts<CR>
" map <leader>T :!rails runner 'puts $LOAD_PATH.join(" ")' \| xargs rdoc -f tags<CR>

au BufRead,BufNewFile *.java set filetype=java ts=4 sw=4 et

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Go configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" syntax highlighting for go
au BufRead,BufNewFile *.go set filetype=go ts=4 sw=4 et

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Python configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" syntax highlighting for python
" au BufRead,BufNewFile *.py set filetype=python ts=4 sw=4
autocmd BufEnter *.py set ai sw=4 ts=4 sta et fo=croql ft=python nosi

let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self
" python-mode
" see: https://github.com/vim-scripts/Python-mode-klen/blob/master/doc/pymode.txt
let g:pymode_lint_checkers = ['pyflakes', 'pep8']
let g:pymode_lint_ignore="E121,E125,E126,E128,E501,W,E1101,E1103"
let g:pymode_lint_error_symbol = '✗'
let g:pymode_lint_info_symbol = '!'
let g:pymode_options_max_line_length = 120
let g:pymode_folding = 0
let g:pymode_syntax_space_errors = 0
let g:pymode_lint = 1
" let g:pymode_lint_cwindow = 0
" let g:pymode_lint_signs = 1
let g:pymode_rope = 1
let g:pymode_rope_goto_definition_cmd = 'e'  " e, new or vnew
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_completion = 0
" let g:pymode_options_max_line_length = 119
let g:pymode_options_colorcolumn = 1

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Javascript configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" syntax highlighting for javascript
au BufRead,BufNewFile *.ts set filetype=javascript ts=2 sw=2 et
au BufRead,BufNewFile *.js set filetype=javascript ts=2 sw=2 et
au BufRead,BufNewFile *.jsx set filetype=javascript ts=2 sw=2 et

" folding settings
" set foldmethod=indent   "fold based on indent
" set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" make all operations work with the OS clipboard.
"set clipboard=unnamed

" toggle the folding of the current block
" nnoremap <Space> za

map <D-F> :Ag!

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffergator Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <D-r> :BuffergatorOpen<CR>
nmap <D-w> :BuffergatorClose<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tab config to make switching tabs identical in
" browser and iTerm2
""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <A-D-Left> :tabp<CR>
nmap <A-D-Right> :tabn<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Utility functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ack \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

func! DeleteTillSlash()
    let g:cmd = getcmdline()

    if has("win16") || has("win32")
        let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
    else
        let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
    endif

    if g:cmd == g:cmd_edited
        if has("win16") || has("win32")
            let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
        else
            let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
        endif
    endif

    return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
    return a:cmd . " " . expand("%:p:h") . "/"
endfunc

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 1
endif

" For YouCompleteMe
" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:pymode_rope = 0

" if exists(':PlugInstall')
set diffopt=vertical
" endif
